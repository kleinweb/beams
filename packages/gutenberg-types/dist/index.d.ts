//#endregion
//#region src/types/block.d.ts
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

interface JSONSchemaForWordPressBlocks {
  $schema?: string;
  /**
   * The version of the Block API used by the block. If the block is registered with API version 2 or lower, the post editor may work as a non-iframe editor. Since all editors are planned to work as iframes in the future, it is recommended to set the `apiVersion` field to 3 and test the block inside the iframe editor.
   *
   * See the API versions documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-api-versions/ for more details.
   */
  apiVersion: 3;
  /**
   * The name for a block is a unique string that identifies a block. Names have to be structured as `namespace/block-name`, where namespace is the name of your plugin or theme.
   */
  name: string;
  /**
   * The name of the experiment this block is a part of, or boolean true if there is no specific experiment name.
   */
  __experimental?: string | boolean;
  /**
   * This is the display title for your block, which can be translated with our translation functions. The block inserter will show this name.
   */
  title: string;
  /**
   * Blocks are grouped into categories to help users browse and discover them.
   *  Core provided categories are: text, media, design, widgets, theme, embed
   *
   * Plugins and Themes can also register custom block categories.
   *
   * https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/#managing-block-categories
   */
  category?: string | ("text" | "media" | "design" | "widgets" | "theme" | "embed");
  /**
   * Setting parent lets a block require that it is only available when nested within the specified blocks. For example, you might want to allow an ‘Add to Cart’ block to only be available within a ‘Product’ block.
   */
  parent?: string[];
  /**
   * The `ancestor` property makes a block available inside the specified block types at any position of the ancestor block subtree. That allows, for example, to place a ‘Comment Content’ block inside a ‘Column’ block, as long as ‘Column’ is somewhere within a ‘Comment Template’ block.
   */
  ancestor?: string[];
  /**
   * The `allowedBlocks` property specifies that only the listed block types can be the children of this block. For example, a ‘List’ block allows only ‘List Item’ blocks as direct children.
   */
  allowedBlocks?: string[];
  /**
   * An icon property should be specified to make it easier to identify a block. These can be any of WordPress’ Dashicons (slug serving also as a fallback in non-js contexts).
   */
  icon?: string;
  /**
   * This is a short description for your block, which can be translated with our translation functions. This will be shown in the block inspector.
   */
  description?: string;
  /**
   * Sometimes a block could have aliases that help users discover it while searching. For example, an image block could also want to be discovered by photo. You can do so by providing an array of unlimited terms (which are translated).
   */
  keywords?: string[];
  /**
   * The current version number of the block, such as 1.0 or 1.0.3. It’s similar to how plugins are versioned. This field might be used with block assets to control cache invalidation, and when the block author omits it, then the installed version of WordPress is used instead.
   */
  version?: string;
  /**
   * The gettext text domain of the plugin/block. More information can be found in the Text Domain section of the How to Internationalize your Plugin page.
   *
   * https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/
   */
  textdomain?: string;
  /**
   * Attributes provide the structured data needs of a block. They can exist in different forms when they are serialized, but they are declared together under a common interface.
   *
   * See the attributes documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/ for more details.
   */
  attributes?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[a-zA-Z]".
     */
    [k: string]: {
      [k: string]: unknown;
    };
  };
  /**
   * Context provided for available access by descendants of blocks of this type, in the form of an object which maps a context name to one of the block’s own attribute.
   *
   * See the block context documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-context/ for more details.
   */
  providesContext?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[a-zA-Z]".
     */
    [k: string]: string;
  };
  /**
   * Array of the names of context values to inherit from an ancestor provider.
   *
   * See the block context documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-context/ for more details.
   */
  usesContext?: string[];
  /**
   * It contains as set of options to control features used in the editor. See the supports documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/ for more details.
   */
  supports?: {
    /**
     * Anchors let you link directly to a specific block on a page. This property adds a field to define an id for the block and a button to copy the direct link.
     */
    anchor?: boolean;
    /**
     * This property adds block controls which allow to change block’s alignment.
     */
    align?: boolean | ("wide" | "full" | "left" | "center" | "right")[];
    /**
     * This property allows to enable wide alignment for your theme. To disable this behavior for a single block, set this flag to false.
     */
    alignWide?: boolean;
    /**
     * ARIA-labels let you define an accessible label for elements. This property allows enabling the definition of an aria-label for the block, without exposing a UI field.
     */
    ariaLabel?: boolean;
    /**
     * By default, the class .wp-block-your-block-name is added to the root element of your saved markup. This helps having a consistent mechanism for styling blocks that themes and plugins can rely on. If, for whatever reason, a class is not desired on the markup, this functionality can be disabled.
     */
    className?: boolean;
    /**
     * This value signals that a block supports some of the properties related to color. When it does, the block editor will show UI controls for the user to set their values.
     *
     * Note that the background and text keys have a default value of true, so if the color property is present they’ll also be considered enabled
     */
    color?: {
      /**
       * This property adds UI controls which allow the user to apply a solid background color to a block.
       *
       * When color support is declared, this property is enabled by default (along with text), so simply setting color will enable background color.
       *
       * To disable background support while keeping other color supports enabled, set to false.
       *
       * When the block declares support for color.background, its attributes definition is extended to include two new attributes: backgroundColor and style
       */
      background?: boolean;
      /**
       * This property adds UI controls which allow the user to apply a gradient background to a block.
       *
       * Gradient presets are sourced from editor-gradient-presets theme support.
       *
       * When the block declares support for color.gradient, its attributes definition is extended to include two new attributes: gradient and style
       */
      gradients?: boolean;
      /**
       * This property adds block controls which allow the user to set link color in a block, link color is disabled by default.
       *
       * Link color presets are sourced from the editor-color-palette theme support.
       *
       * When the block declares support for color.link, its attributes definition is extended to include the style attribute
       */
      link?: boolean;
      /**
       * This property adds block controls which allow the user to set text color in a block.
       *
       * When color support is declared, this property is enabled by default (along with background), so simply setting color will enable text color.
       *
       * Text color presets are sourced from the editor-color-palette theme support.
       *
       * When the block declares support for color.text, its attributes definition is extended to include two new attributes: textColor and style
       */
      text?: boolean;
      /**
       * This property adds block controls which allow the user to set heading colors in a block. Heading color is disabled by default.
       *
       * Heading color presets are sourced from the editor-color-palette theme support.
       *
       * When the block declares support for color.heading, its attributes definition is extended to include the style attribute
       */
      heading?: boolean;
      /**
       * This property adds block controls which allow the user to set button colors in a block. Button color is disabled by default.
       *
       * Button color presets are sourced from the editor-color-palette theme support.
       *
       * When the block declares support for color.button, its attributes definition is extended to include the style attribute
       */
      button?: boolean;
      /**
       * Determines whether the contrast checker widget displays in the block editor UI.
       *
       * The contrast checker appears only if the block declares support for color. It tests the readability of color combinations and warns if there is a potential issue. The property is enabled by default.
       *
       * Set to `false` to explicitly disable.
       */
      enableContrastChecker?: boolean;
      [k: string]: unknown;
    };
    /**
     * This property adds a field to define a custom className for the block’s wrapper.
     */
    customClassName?: boolean;
    /**
     * This value signals that a block supports some of the CSS style properties related to dimensions. When it does, the block editor will show UI controls for the user to set their values if the theme declares support.
     *
     * When the block declares support for a specific dimensions property, its attributes definition is extended to include the style attribute.
     */
    dimensions?: {
      /**
       * Allow blocks to define an aspect ratio value.
       */
      aspectRatio?: boolean;
      /**
       * Allow blocks to define a minimum height value.
       */
      minHeight?: boolean;
      [k: string]: unknown;
    };
    /**
     * This value signals that a block supports some of the properties related to filters. When it does, the block editor will show UI controls for the user to set their values if the theme declares support.
     *
     * When the block declares support for a specific filter property, its attributes definition is extended to include the style attribute.
     */
    filter?: {
      /**
       * Allow blocks to define a duotone filter.
       */
      duotone?: boolean;
      [k: string]: unknown;
    };
    /**
     * This value signals that a block supports some of the CSS style properties related to background. When it does, the block editor will show UI controls for the user to set their values if the theme declares support.
     *
     * When the block declares support for a specific background property, its attributes definition is extended to include the style attribute.
     */
    background?: {
      /**
       * Allow blocks to define a background image.
       */
      backgroundImage?: boolean;
      /**
       * Allow blocks to define values related to the size of a background image, including size, position, and repeat controls
       */
      backgroundSize?: boolean;
      [k: string]: unknown;
    };
    /**
     * By default, a block’s markup can be edited individually. To disable this behavior, set html to false.
     */
    html?: boolean;
    /**
     * By default, all blocks will appear in the inserter, block transforms menu, Style Book, etc. To hide a block from all parts of the user interface so that it can only be inserted programmatically, set inserter to false.
     */
    inserter?: boolean;
    /**
     * By default, a block can be renamed by a user from the block 'Options' dropdown or the 'Advanced' panel. To disable this behavior, set renaming to false.
     */
    renaming?: boolean;
    /**
     * This value only applies to blocks that are containers for inner blocks. If set to `true` the layout type will be `flow`. For other layout types it's necessary to set the `type` explicitly inside the `default` object.
     */
    layout?: boolean | {
      /**
       * Allows setting the `type` property to define what layout type is default for the block, and also default values for any properties inherent to that layout type, e.g., for a `flex` layout, a default value can be set for `flexWrap`.
       */
      default?: {
        /**
         * The layout type.
         */
        type?: "constrained" | "grid" | "flex";
        /**
         * The content size used on all children.
         */
        contentSize?: string;
        /**
         * The wide size used on alignwide children.
         */
        wideSize?: string;
        /**
         * Content justification value.
         */
        justifyContent?: "right" | "center" | "space-between" | "left" | "stretch";
        /**
         * The orientation of the layout.
         */
        orientation?: "horizontal" | "vertical";
        /**
         * The flex wrap value.
         */
        flexWrap?: "wrap" | "nowrap";
        /**
         * The vertical alignment value.
         */
        verticalAlignment?: "top" | "center" | "bottom" | "space-between" | "stretch";
        /**
         * The minimum column width value.
         */
        minimumColumnWidth?: string;
        /**
         * The column count value.
         */
        columnCount?: number;
        [k: string]: unknown;
      };
      /**
       * Exposes a switcher control that allows toggling between all existing layout types.
       */
      allowSwitching?: boolean;
      /**
       * Determines display of layout controls in the block sidebar. If set to false, layout controls will be hidden.
       */
      allowEditing?: boolean;
      /**
       * For the `flow` layout type only, determines display of the `Inner blocks use content width` toggle.
       */
      allowInheriting?: boolean;
      /**
       * For the `flex` layout type only, determines display of sizing controls (Fit/Fill/Fixed) on all child blocks of the flex block.
       */
      allowSizingOnChildren?: boolean;
      /**
       * For the `flex` layout type only, determines display of vertical alignment controls in the block toolbar.
       */
      allowVerticalAlignment?: boolean;
      /**
       * For the `flex` layout type, determines display of justification controls in the block toolbar and block sidebar. For the `constrained` layout type, determines display of justification control in the block sidebar.
       */
      allowJustification?: boolean;
      /**
       * For the `flex` layout type only, determines display of the orientation control in the block toolbar.
       */
      allowOrientation?: boolean;
      /**
       * For the `constrained` layout type only, determines display of the custom content and wide size controls in the block sidebar.
       */
      allowCustomContentAndWideSize?: boolean;
      [k: string]: unknown;
    };
    /**
     * A non-multiple block can be inserted into each post, one time only. For example, the built-in ‘More’ block cannot be inserted again if it already exists in the post being edited. A non-multiple block’s icon is automatically dimmed (unclickable) to prevent multiple instances.
     */
    multiple?: boolean;
    /**
     * A block may want to disable the ability of being converted into a reusable block. By default all blocks can be converted to a reusable block. If supports reusable is set to false, the option to convert the block into a reusable block will not appear.
     */
    reusable?: boolean;
    /**
     * A block may want to disable the ability to toggle the lock state. It can be locked/unlocked by a user from the block 'Options' dropdown by default. To disable this behavior, set lock to false.
     */
    lock?: boolean;
    /**
     * This value signals that a block supports some of the CSS style properties related to position. When it does, the block editor will show UI controls for the user to set their values if the theme declares support.
     *
     * When the block declares support for a specific position property, its attributes definition is extended to include the style attribute.
     */
    position?: {
      /**
       * Allow blocks to stick to their immediate parent when scrolling the page.
       */
      sticky?: boolean;
      [k: string]: unknown;
    };
    /**
     * This value signals that a block supports some of the CSS style properties related to spacing. When it does, the block editor will show UI controls for the user to set their values if the theme declares support.
     *
     * When the block declares support for a specific spacing property, its attributes definition is extended to include the style attribute.
     */
    spacing?: {
      margin?: boolean | ("top" | "right" | "left" | "bottom")[] | ("vertical" | "horizontal")[];
      padding?: boolean | ("top" | "right" | "left" | "bottom")[] | ("vertical" | "horizontal")[];
      [k: string]: unknown;
    };
    /**
     * Allow blocks to define a box shadow.
     */
    shadow?: boolean | {
      [k: string]: unknown;
    };
    /**
     * This value signals that a block supports some of the CSS style properties related to typography. When it does, the block editor will show UI controls for the user to set their values if the theme declares support.
     *
     * When the block declares support for a specific typography property, its attributes definition is extended to include the style attribute.
     */
    typography?: {
      /**
       * This value signals that a block supports the font-size CSS style property. When it does, the block editor will show an UI control for the user to set its value.
       *
       * The values shown in this control are the ones declared by the theme via the editor-font-sizes theme support, or the default ones if none is provided.
       *
       * When the block declares support for fontSize, its attributes definition is extended to include two new attributes: fontSize and style
       */
      fontSize?: boolean;
      /**
       * This value signals that a block supports the line-height CSS style property. When it does, the block editor will show an UI control for the user to set its value if the theme declares support.
       *
       * When the block declares support for lineHeight, its attributes definition is extended to include a new attribute style of object type with no default assigned. It stores the custom value set by the user. The block can apply a default style by specifying its own style attribute with a default
       */
      lineHeight?: boolean;
      /**
       * This property adds block toolbar controls which allow to change block's text alignment.
       */
      textAlign?: boolean | ("left" | "center" | "right")[];
      [k: string]: unknown;
    };
    /**
     * Indicates if the block is using Interactivity API features.
     */
    interactivity?: boolean | {
      /**
       * Indicates whether a block is compatible with the Interactivity API client-side navigation.
       *
       * Set it to true only if the block is not interactive or if it is interactive using the Interactivity API. Set it to false if the block is interactive but uses vanilla JS, jQuery or another JS framework/library other than the Interactivity API.
       */
      clientNavigation?: boolean;
      /**
       * Indicates whether the block is using the Interactivity API directives.
       */
      interactive?: boolean;
      [k: string]: unknown;
    };
    /**
     * This property indicates whether the block can split when the Enter key is pressed or when blocks are pasted.
     */
    splitting?: boolean;
    [k: string]: unknown;
  };
  /**
   * Provides custom CSS selectors and mappings for the block. Selectors may be set for the block itself or per-feature e.g. typography. Custom selectors per feature or sub-feature, allow different block styles to be applied to different elements within the block.
   */
  selectors?: {
    /**
     * The primary CSS class to apply to the block. This replaces the `.wp-block-name` class if set.
     */
    root?: string;
    /**
     * Custom CSS selector used to generate rules for the block's theme.json border styles.
     */
    border?: string | {
      root?: string;
      color?: string;
      radius?: string;
      style?: string;
      width?: string;
      [k: string]: unknown;
    };
    /**
     * Custom CSS selector used to generate rules for the block's theme.json color styles.
     */
    color?: string | {
      root?: string;
      text?: string;
      background?: string;
      [k: string]: unknown;
    };
    /**
     * Custom CSS selector used to generate rules for the block's theme.json dimensions styles.
     */
    dimensions?: string | {
      root?: string;
      aspectRatio?: string;
      minHeight?: string;
      [k: string]: unknown;
    };
    /**
     * Custom CSS selector used to generate rules for the block's theme.json spacing styles.
     */
    spacing?: string | {
      root?: string;
      blockGap?: string;
      padding?: string;
      margin?: string;
      [k: string]: unknown;
    };
    /**
     * Custom CSS selector used to generate rules for the block's theme.json typography styles.
     */
    typography?: string | {
      root?: string;
      fontFamily?: string;
      fontSize?: string;
      fontStyle?: string;
      fontWeight?: string;
      lineHeight?: string;
      letterSpacing?: string;
      textDecoration?: string;
      textTransform?: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * Block styles can be used to provide alternative styles to block. It works by adding a class name to the block’s wrapper. Using CSS, a theme developer can target the class name for the block style if it is selected.
   *
   * Plugins and Themes can also register custom block style for existing blocks.
   *
   * https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/
   */
  styles?: {
    name: string;
    label: string;
    isDefault?: boolean;
  }[];
  /**
   * It provides structured example data for the block. This data is used to construct a preview for the block to be shown in the Inspector Help Panel when the user mouses over the block.
   *
   * See the example documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/#example-optional for more details.
   */
  example?: {
    /**
     * The viewportWidth controls the width of the iFrame container in which the block preview will get rendered
     */
    viewportWidth?: number;
    /**
     * Set the attributes for the block example
     */
    attributes?: {
      [k: string]: unknown;
    };
    /**
     * Set the inner blocks that should be used within the block example. The blocks should be defined as a nested array like this:
     *
     * [ { "name": "core/heading", "attributes": { "content": "This is an Example" } } ]
     *
     * Where each block itself is an object that contains the block name, the block attributes, and the blocks inner blocks.
     */
    innerBlocks?: unknown[];
    [k: string]: unknown;
  };
  /**
   * Block Hooks allow a block to automatically insert itself next to all instances of a given block type.
   *
   * See the Block Hooks documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/#block-hooks-optional for more details.
   */
  blockHooks?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-z][a-z0-9-]*\/[a-z][a-z0-9-]*$".
     */
    [k: string]: "before" | "after" | "firstChild" | "lastChild";
  };
  /**
   * Block type editor script definition. It will only be enqueued in the context of the editor.
   */
  editorScript?: string | string[];
  /**
   * Block type frontend and editor script definition. It will be enqueued both in the editor and when viewing the content on the front of the site.
   */
  script?: string | string[];
  /**
   * Block type frontend script definition. It will be enqueued only when viewing the content on the front of the site.
   */
  viewScript?: string | string[];
  /**
   * Block type frontend script module definition. It will be enqueued only when viewing the content on the front of the site.
   */
  viewScriptModule?: string | string[];
  /**
   * Block type editor style definition. It will only be enqueued in the context of the editor.
   */
  editorStyle?: string | string[];
  /**
   * Block type frontend style definition. It will be enqueued both in the editor and when viewing the content on the front of the site.
   */
  style?: string | string[];
  /**
   * Block type frontend style definition. It will be enqueued only when viewing the content on the front of the site.
   */
  viewStyle?: string | string[];
  /**
   * Block Variations is the API that allows a block to have similar versions of it, but all these versions share some common functionality.
   */
  variations?: string | {
    /**
     * The unique and machine-readable name.
     */
    name: string;
    /**
     * A human-readable variation title.
     */
    title: string;
    /**
     * A detailed variation description.
     */
    description?: string;
    /**
     * A category classification, used in search interfaces to arrange block types by category.
     */
    category?: string | ("text" | "media" | "design" | "widgets" | "theme" | "embed");
    /**
     * An icon helping to visualize the variation. It can have the same shape as the block type.
     */
    icon?: string;
    /**
     * Indicates whether the current variation is the default one.
     */
    isDefault?: boolean;
    /**
     * Values that override block attributes.
     */
    attributes?: {
      [k: string]: unknown;
    };
    /**
     * Initial configuration of nested blocks.
     */
    innerBlocks?: unknown[][];
    /**
     * Example provides structured data for the block preview. You can set to undefined to disable the preview shown for the block type.
     */
    example?: {
      [k: string]: unknown;
    };
    /**
     * The list of scopes where the variation is applicable.
     */
    scope?: ("inserter" | "block" | "transform")[];
    /**
     * An array of terms (which can be translated) that help users discover the variation while searching.
     */
    keywords?: string[];
    /**
     * The list of attributes that should be compared. Each attributes will be matched and the variation will be active if all of them are matching.
     */
    isActive?: string[];
  }[];
  /**
   * Template file loaded on the server when rendering a block.
   */
  render?: string;
}
//#endregion
//#region src/types/font-collection.d.ts
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

interface JSONSchemaForWordPressFontCollections {
  /**
   * JSON schema URI for font-collection.json.
   */
  $schema?: string;
  /**
   * Array of font families ready to be installed.
   */
  font_families: {
    /**
     * Font family settings, with added preview property.
     */
    font_family_settings: {
      /**
       * Name of the font family preset, translatable.
       */
      name: string;
      /**
       * Kebab-case unique identifier for the font family preset.
       */
      slug: string;
      /**
       * CSS font-family value.
       */
      fontFamily: string;
      /**
       * URL to a preview image of the font family.
       */
      preview?: string;
      /**
       * Array of font-face definitions.
       */
      fontFace?: FontFace[];
    };
    /**
     * Array of category slugs.
     */
    categories?: string[];
  }[];
}
/**
 * Font face settings, with added preview property.
 */
interface FontFace {
  /**
   * URL to a preview image of the font.
   */
  preview?: string;
  /**
   * CSS font-family value.
   */
  fontFamily: string;
  /**
   * CSS font-style value.
   */
  fontStyle?: string;
  /**
   * List of available font weights, separated by a space.
   */
  fontWeight?: string | number;
  /**
   * CSS font-display value.
   */
  fontDisplay?: "auto" | "block" | "fallback" | "swap" | "optional";
  /**
   * Paths or URLs to the font files.
   */
  src: string | string[];
  /**
   * CSS font-stretch value.
   */
  fontStretch?: string;
  /**
   * CSS ascent-override value.
   */
  ascentOverride?: string;
  /**
   * CSS descent-override value.
   */
  descentOverride?: string;
  /**
   * CSS font-variant value.
   */
  fontVariant?: string;
  /**
   * CSS font-feature-settings value.
   */
  fontFeatureSettings?: string;
  /**
   * CSS font-variation-settings value.
   */
  fontVariationSettings?: string;
  /**
   * CSS line-gap-override value.
   */
  lineGapOverride?: string;
  /**
   * CSS size-adjust value.
   */
  sizeAdjust?: string;
  /**
   * CSS unicode-range value.
   */
  unicodeRange?: string;
}
declare namespace theme_d_exports {
  export { JSONSchemaForWordPressBlockThemeGlobalSettingsAndStyles, RefComplete, SettingsAppearanceToolsProperties, SettingsBackgroundProperties, SettingsBlocksPropertiesComplete, SettingsBorderProperties, SettingsColorProperties, SettingsCustomAdditionalProperties, SettingsCustomProperties, SettingsDimensionsProperties, SettingsLayoutProperties, SettingsLightboxProperties, SettingsPositionProperties, SettingsProperties, SettingsPropertiesComplete, SettingsShadowProperties, SettingsSpacingProperties, SettingsTypographyProperties, StylesBlocksPropertiesComplete, StylesElementsPropertiesComplete, StylesElementsPseudoSelectorsProperties, StylesProperties, StylesPropertiesAndElementsComplete, StylesPropertiesComplete, StylesVariationBlockPropertiesComplete, StylesVariationBlocksPropertiesComplete, StylesVariationProperties, StylesVariationPropertiesComplete, StylesVariationsProperties, StylesVariationsPropertiesComplete };
}
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

type SettingsProperties = SettingsAppearanceToolsProperties & SettingsBackgroundProperties & SettingsBorderProperties & SettingsColorProperties & SettingsDimensionsProperties & SettingsLayoutProperties & SettingsLightboxProperties & SettingsPositionProperties & SettingsShadowProperties & SettingsSpacingProperties & SettingsTypographyProperties & SettingsCustomProperties;
/**
 * This interface was referenced by `SettingsBlocksPropertiesComplete`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z0-9-]*\/[a-z][a-z0-9-]*$".
 */
type SettingsPropertiesComplete = SettingsProperties & {
  [k: string]: unknown;
};
type StylesPropertiesComplete = StylesProperties & {
  [k: string]: unknown;
};
/**
 * This interface was referenced by `StylesBlocksPropertiesComplete`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z0-9-]*\/[a-z][a-z0-9-]*$".
 */
type StylesPropertiesAndElementsComplete = StylesProperties & {
  elements?: StylesElementsPropertiesComplete;
  variations?: StylesVariationsPropertiesComplete;
  [k: string]: unknown;
} & {
  [k: string]: unknown;
};
/**
 * This interface was referenced by `StylesVariationsPropertiesComplete`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z0-9-]*$".
 */
type StylesVariationPropertiesComplete = StylesProperties & {
  elements?: StylesElementsPropertiesComplete;
  blocks?: StylesVariationBlocksPropertiesComplete;
  [k: string]: unknown;
} & {
  [k: string]: unknown;
};
/**
 * This interface was referenced by `StylesVariationBlocksPropertiesComplete`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z0-9-]*\/[a-z][a-z0-9-]*$".
 */
type StylesVariationBlockPropertiesComplete = StylesProperties & {
  elements?: StylesElementsPropertiesComplete;
  [k: string]: unknown;
} & {
  [k: string]: unknown;
};
/**
 * This interface was referenced by `StylesVariationsProperties`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z0-9-]*$".
 */
type StylesVariationProperties = StylesProperties & {
  elements?: StylesElementsPropertiesComplete;
  blocks?: StylesVariationBlocksPropertiesComplete;
  [k: string]: unknown;
} & {
  [k: string]: unknown;
};
interface JSONSchemaForWordPressBlockThemeGlobalSettingsAndStyles {
  /**
   * JSON schema URI for theme.json.
   */
  $schema?: string;
  /**
   * Version of theme.json to use.
   */
  version: 3;
  /**
   * Title of the styles variation. If not defined, the file name will be used.
   */
  title?: string;
  /**
   * Slug of the styles variation. If not defined, the kebab-case title will be used.
   */
  slug?: string;
  /**
   * Description of the styles variation.
   */
  description?: string;
  /**
   * List of block types that can use the block style variation this theme.json file represents.
   */
  blockTypes?: string[];
  /**
   * Settings for the block editor and individual blocks. These include things like:
   * - Which customization options should be available to the user.
   * - The default colors, font sizes... available to the user.
   * - CSS custom properties and class names used in styles.
   * - And the default layout of the editor (widths and available alignments).
   */
  settings?: SettingsProperties & {
    /**
     * Enables root padding (the values from `styles.spacing.padding`) to be applied to the contents of full-width blocks instead of the root block.
     *
     * Please note that when using this setting, `styles.spacing.padding` should always be set as an object with `top`, `right`, `bottom`, `left` values declared separately.
     */
    useRootPaddingAwareAlignments?: boolean;
    blocks?: SettingsBlocksPropertiesComplete;
    [k: string]: unknown;
  } & {
    [k: string]: unknown;
  };
  /**
   * Organized way to set CSS properties. Styles in the top-level will be added in the `body` selector.
   */
  styles?: StylesProperties & {
    elements?: StylesElementsPropertiesComplete;
    blocks?: StylesBlocksPropertiesComplete;
    variations?: StylesVariationsProperties;
    [k: string]: unknown;
  } & {
    [k: string]: unknown;
  };
  /**
   * Additional metadata for custom templates defined in the templates folder.
   */
  customTemplates?: {
    /**
     * Filename, without extension, of the template in the templates folder.
     */
    name: string;
    /**
     * Title of the template, translatable.
     */
    title: string;
    /**
     * List of post types that can use this custom template.
     */
    postTypes?: string[];
  }[];
  /**
   * Additional metadata for template parts defined in the parts folder.
   */
  templateParts?: {
    /**
     * Filename, without extension, of the template in the parts folder.
     */
    name: string;
    /**
     * Title of the template, translatable.
     */
    title?: string;
    /**
     * The area the template part is used for. Block variations for `header` and `footer` values exist and will be used when the area is set to one of those.
     */
    area?: string;
  }[];
  /**
   * An array of pattern slugs to be registered from the Pattern Directory.
   */
  patterns?: string[];
}
interface SettingsAppearanceToolsProperties {
  /**
   * Setting that enables the following UI tools:
   *
   * - background: backgroundImage, backgroundSize
   * - border: color, radius, style, width
   * - color: link, heading, button, caption
   * - dimensions: aspectRatio, minHeight
   * - position: sticky
   * - spacing: blockGap, margin, padding
   * - typography: lineHeight
   */
  appearanceTools?: boolean;
  [k: string]: unknown;
}
interface SettingsBackgroundProperties {
  /**
   * Settings related to background.
   */
  background?: {
    /**
     * Allow users to set a background image.
     */
    backgroundImage?: boolean;
    /**
     * Allow users to set values related to the size of a background image, including size, position, and repeat controls.
     */
    backgroundSize?: boolean;
  };
  [k: string]: unknown;
}
interface SettingsBorderProperties {
  /**
   * Settings related to borders.
   */
  border?: {
    /**
     * Allow users to set custom border colors.
     */
    color?: boolean;
    /**
     * Allow users to set custom border radius.
     */
    radius?: boolean;
    /**
     * Allow users to set custom border styles.
     */
    style?: boolean;
    /**
     * Allow users to set custom border widths.
     */
    width?: boolean;
    /**
     * Border radius size presets for the border radius selector.
     * Generates a custom property (`--wp--preset--border-radius--{slug}`) per preset value.
     */
    radiusSizes?: {
      /**
       * Name of the border radius size preset, translatable.
       */
      name?: string;
      /**
       * Unique identifier for the border raidus size preset.
       */
      slug?: string;
      /**
       * CSS border-radius value, including units.
       */
      size?: string;
    }[];
  };
  [k: string]: unknown;
}
interface SettingsColorProperties {
  /**
   * Settings related to colors.
   */
  color?: {
    /**
     * Allow users to set background colors.
     */
    background?: boolean;
    /**
     * Allow users to select custom colors.
     */
    custom?: boolean;
    /**
     * Allow users to create custom duotone filters.
     */
    customDuotone?: boolean;
    /**
     * Allow users to create custom gradients.
     */
    customGradient?: boolean;
    /**
     * Allow users to choose filters from the default duotone filter presets.
     */
    defaultDuotone?: boolean;
    /**
     * Allow users to choose colors from the default gradients.
     */
    defaultGradients?: boolean;
    /**
     * Allow users to choose colors from the default palette.
     */
    defaultPalette?: boolean;
    /**
     * Duotone presets for the duotone picker.
     * Doesn't generate classes or properties.
     */
    duotone?: {
      /**
       * Name of the duotone preset, translatable.
       */
      name: string;
      /**
       * Kebab-case unique identifier for the duotone preset.
       */
      slug: string;
      /**
       * List of colors from dark to light.
       */
      colors: string[];
    }[];
    /**
     * Gradient presets for the gradient picker.
     * Generates a single class (`.has-{slug}-background`) and custom property (`--wp--preset--gradient--{slug}`) per preset value.
     */
    gradients?: {
      /**
       * Name of the gradient preset, translatable.
       */
      name: string;
      /**
       * Kebab-case unique identifier for the gradient preset.
       */
      slug: string;
      /**
       * CSS gradient string.
       */
      gradient: string;
    }[];
    /**
     * Allow users to set link colors in a block.
     */
    link?: boolean;
    /**
     * Color palette presets for the color picker.
     * Generates three classes (`.has-{slug}-color`, `.has-{slug}-background-color`, and `.has-{slug}-border-color`) and a single custom property (`--wp--preset--color--{slug}`) per preset value.
     */
    palette?: {
      /**
       * Name of the color preset, translatable.
       */
      name: string;
      /**
       * Kebab-case unique identifier for the color preset.
       */
      slug: string;
      /**
       * CSS hex or rgb(a) string.
       */
      color: string;
    }[];
    /**
     * Allow users to set text colors in a block.
     */
    text?: boolean;
    /**
     * Allow users to set heading colors in a block.
     */
    heading?: boolean;
    /**
     * Allow users to set button colors in a block.
     */
    button?: boolean;
    /**
     * Allow users to set caption colors in a block.
     */
    caption?: boolean;
  };
  [k: string]: unknown;
}
interface SettingsDimensionsProperties {
  /**
   * Settings related to dimensions.
   */
  dimensions?: {
    /**
     * Allow users to set an aspect ratio.
     */
    aspectRatio?: boolean;
    /**
     * Allow users to choose aspect ratios from the default set of aspect ratios.
     */
    defaultAspectRatios?: boolean;
    /**
     * Allow users to define aspect ratios for some blocks.
     */
    aspectRatios?: {
      /**
       * Name of the aspect ratio preset.
       */
      name?: string;
      /**
       * Kebab-case unique identifier for the aspect ratio preset.
       */
      slug?: string;
      /**
       * Aspect ratio expressed as a division or decimal.
       */
      ratio?: string;
      [k: string]: unknown;
    }[];
    /**
     * Allow users to set custom minimum height.
     */
    minHeight?: boolean;
  };
  [k: string]: unknown;
}
interface SettingsLayoutProperties {
  /**
   * Settings related to layout.
   */
  layout?: {
    /**
     * Sets the max-width of the content.
     */
    contentSize?: string;
    /**
     * Sets the max-width of wide (`.alignwide`) content. Also used as the maximum viewport when calculating fluid font sizes
     */
    wideSize?: string;
    /**
     * Disable the layout UI controls.
     */
    allowEditing?: boolean;
    /**
     * Enable or disable the custom content and wide size controls.
     */
    allowCustomContentAndWideSize?: boolean;
  };
  [k: string]: unknown;
}
interface SettingsLightboxProperties {
  /**
   * Settings related to the lightbox.
   */
  lightbox?: {
    /**
     * Defines whether the lightbox is enabled or not.
     */
    enabled?: boolean;
    /**
     * Defines whether to show the Lightbox UI in the block editor. If set to `false`, the user won't be able to change the lightbox settings in the block editor.
     */
    allowEditing?: boolean;
  };
  [k: string]: unknown;
}
interface SettingsPositionProperties {
  /**
   * Settings related to position.
   */
  position?: {
    /**
     * Allow users to set sticky position.
     */
    sticky?: boolean;
  };
  [k: string]: unknown;
}
interface SettingsShadowProperties {
  /**
   * Settings related to shadows.
   */
  shadow?: {
    /**
     * Allow users to choose shadows from the default shadow presets.
     */
    defaultPresets?: boolean;
    /**
     * Shadow presets for the shadow picker.
     * Generates a single custom property (`--wp--preset--shadow--{slug}`) per preset value.
     */
    presets?: {
      /**
       * Name of the shadow preset, translatable.
       */
      name: string;
      /**
       * Kebab-case unique identifier for the shadow preset.
       */
      slug: string;
      /**
       * CSS box-shadow value
       */
      shadow: string;
    }[];
  };
  [k: string]: unknown;
}
interface SettingsSpacingProperties {
  /**
   * Settings related to spacing.
   */
  spacing?: {
    /**
     * Enables `--wp--style--block-gap` to be generated from styles.spacing.blockGap.
     * A value of `null` instead of `false` further disables layout styles from being generated.
     */
    blockGap?: boolean | null;
    /**
     * Allow users to set a custom margin.
     */
    margin?: boolean;
    /**
     * Allow users to set a custom padding.
     */
    padding?: boolean;
    /**
     * List of units the user can use for spacing values.
     *
     * @minItems 1
     */
    units?: [string, ...string[]];
    /**
     * Allow users to set custom space sizes.
     */
    customSpacingSize?: boolean;
    /**
     * Allow users to choose space sizes from the default space size presets.
     */
    defaultSpacingSizes?: boolean;
    /**
     * Space size presets for the space size selector.
     * Generates a custom property (`--wp--preset--spacing--{slug}`) per preset value.
     */
    spacingSizes?: {
      /**
       * Name of the space size preset, translatable.
       */
      name?: string;
      /**
       * Unique identifier for the space size preset. For best cross theme compatibility these should be in the form '10','20','30','40','50','60', etc. with '50' representing the 'Medium' size step. If all slugs begin with a number they will be merged with default and user slugs and sorted numerically.
       */
      slug?: string;
      /**
       * CSS space-size value, including units.
       */
      size?: string;
    }[];
    /**
     * Settings to auto-generate space size presets for the space size selector.
     * Generates a custom property (--wp--preset--spacing--{slug}`) per preset value.
     */
    spacingScale?: {
      /**
       * With + or * depending on whether scale is generated by increment or multiplier.
       */
      operator?: "+" | "*";
      /**
       * The amount to increment each step by.
       */
      increment?: number;
      /**
       * Number of steps to generate in scale.
       */
      steps?: number;
      /**
       * The value to medium setting in the scale.
       */
      mediumStep?: number;
      /**
       * Unit that the scale uses, eg. rem, em, px.
       */
      unit?: "px" | "em" | "rem" | "%" | "vw" | "svw" | "lvw" | "dvw" | "vh" | "svh" | "lvh" | "dvh" | "vi" | "svi" | "lvi" | "dvi" | "vb" | "svb" | "lvb" | "dvb" | "vmin" | "svmin" | "lvmin" | "dvmin" | "vmax" | "svmax" | "lvmax" | "dvmax";
    };
  };
  [k: string]: unknown;
}
interface SettingsTypographyProperties {
  /**
   * Settings related to typography.
   */
  typography?: {
    /**
     * Allow users to choose font sizes from the default font size presets.
     */
    defaultFontSizes?: boolean;
    /**
     * Allow users to set custom font sizes.
     */
    customFontSize?: boolean;
    /**
     * Allow users to set custom font styles.
     */
    fontStyle?: boolean;
    /**
     * Allow users to set custom font weights.
     */
    fontWeight?: boolean;
    /**
     * Enables fluid typography and allows users to set global fluid typography parameters.
     */
    fluid?: {
      /**
       * Allow users to set a global minimum font size boundary in px, rem or em. Custom font sizes below this value will not be clamped, and all calculated minimum font sizes will be, at a minimum, this value.
       */
      minFontSize?: string;
      /**
       * Allow users to set custom a max viewport width in px, rem or em, used to set the maximum size boundary of a fluid font size.
       */
      maxViewportWidth?: string;
      /**
       * Allow users to set a custom min viewport width in px, rem or em, used to set the minimum size boundary of a fluid font size.
       */
      minViewportWidth?: string;
    } | boolean;
    /**
     * Allow users to set custom letter spacing.
     */
    letterSpacing?: boolean;
    /**
     * Allow users to set custom line height.
     */
    lineHeight?: boolean;
    /**
     * Allow users to set the text align.
     */
    textAlign?: boolean;
    /**
     * Allow users to set the number of text columns.
     */
    textColumns?: boolean;
    /**
     * Allow users to set custom text decorations.
     */
    textDecoration?: boolean;
    /**
     * Allow users to set the writing mode.
     */
    writingMode?: boolean;
    /**
     * Allow users to set custom text transforms.
     */
    textTransform?: boolean;
    /**
     * Enable drop cap.
     */
    dropCap?: boolean;
    /**
     * Font size presets for the font size selector.
     * Generates a single class (`.has-{slug}-color`) and custom property (`--wp--preset--font-size--{slug}`) per preset value.
     */
    fontSizes?: {
      /**
       * Name of the font size preset, translatable.
       */
      name?: string;
      /**
       * Kebab-case unique identifier for the font size preset.
       */
      slug?: string;
      /**
       * CSS font-size value, including units.
       */
      size?: string;
      /**
       * Specifies the minimum and maximum font size value of a fluid font size. Set to `false` to bypass fluid calculations and use the static `size` value.
       */
      fluid?: {
        /**
         * A min font size for fluid font size calculations in px, rem or em.
         */
        min?: string;
        /**
         * A max font size for fluid font size calculations in px, rem or em.
         */
        max?: string;
      } | boolean;
    }[];
    /**
     * Font family presets for the font family selector.
     * Generates a single custom property (`--wp--preset--font-family--{slug}`) per preset value.
     */
    fontFamilies?: {
      /**
       * Name of the font family preset, translatable.
       */
      name?: string;
      /**
       * Kebab-case unique identifier for the font family preset.
       */
      slug?: string;
      /**
       * CSS font-family value.
       */
      fontFamily?: string;
      /**
       * Array of font-face declarations.
       */
      fontFace?: {
        /**
         * CSS font-family value.
         */
        fontFamily: string;
        /**
         * CSS font-style value.
         */
        fontStyle?: string;
        /**
         * List of available font weights, separated by a space.
         */
        fontWeight?: string | number;
        /**
         * CSS font-display value.
         */
        fontDisplay?: "auto" | "block" | "fallback" | "swap" | "optional";
        /**
         * Paths or URLs to the font files.
         */
        src: string | string[];
        /**
         * CSS font-stretch value.
         */
        fontStretch?: string;
        /**
         * CSS ascent-override value.
         */
        ascentOverride?: string;
        /**
         * CSS descent-override value.
         */
        descentOverride?: string;
        /**
         * CSS font-variant value.
         */
        fontVariant?: string;
        /**
         * CSS font-feature-settings value.
         */
        fontFeatureSettings?: string;
        /**
         * CSS font-variation-settings value.
         */
        fontVariationSettings?: string;
        /**
         * CSS line-gap-override value.
         */
        lineGapOverride?: string;
        /**
         * CSS size-adjust value.
         */
        sizeAdjust?: string;
        /**
         * CSS unicode-range value.
         */
        unicodeRange?: string;
      }[];
    }[];
  };
  [k: string]: unknown;
}
interface SettingsCustomProperties {
  custom?: SettingsCustomAdditionalProperties;
  [k: string]: unknown;
}
/**
 * Generate custom CSS custom properties of the form `--wp--custom--{key}--{nested-key}: {value};`. `camelCased` keys are transformed to `kebab-case` as to follow the CSS property naming schema. Keys at different depth levels are separated by `--`, so keys should not include `--` in the name.
 */
interface SettingsCustomAdditionalProperties {
  [k: string]: string | number | SettingsCustomAdditionalProperties;
}
/**
 * Settings defined on a per-block basis.
 */
interface SettingsBlocksPropertiesComplete {
  "core/archives"?: SettingsPropertiesComplete;
  "core/audio"?: SettingsPropertiesComplete;
  "core/avatar"?: SettingsPropertiesComplete;
  "core/block"?: SettingsPropertiesComplete;
  "core/button"?: SettingsPropertiesComplete;
  "core/buttons"?: SettingsPropertiesComplete;
  "core/calendar"?: SettingsPropertiesComplete;
  "core/categories"?: SettingsPropertiesComplete;
  "core/code"?: SettingsPropertiesComplete;
  "core/column"?: SettingsPropertiesComplete;
  "core/columns"?: SettingsPropertiesComplete;
  "core/comment-author-avatar"?: SettingsPropertiesComplete;
  "core/comment-author-name"?: SettingsPropertiesComplete;
  "core/comment-content"?: SettingsPropertiesComplete;
  "core/comment-date"?: SettingsPropertiesComplete;
  "core/comment-edit-link"?: SettingsPropertiesComplete;
  "core/comment-reply-link"?: SettingsPropertiesComplete;
  "core/comments"?: SettingsPropertiesComplete;
  "core/comments-pagination"?: SettingsPropertiesComplete;
  "core/comments-pagination-next"?: SettingsPropertiesComplete;
  "core/comments-pagination-numbers"?: SettingsPropertiesComplete;
  "core/comments-pagination-previous"?: SettingsPropertiesComplete;
  "core/comments-title"?: SettingsPropertiesComplete;
  "core/comment-template"?: SettingsPropertiesComplete;
  "core/cover"?: SettingsPropertiesComplete;
  "core/details"?: SettingsPropertiesComplete;
  "core/embed"?: SettingsPropertiesComplete;
  "core/file"?: SettingsPropertiesComplete;
  "core/footnotes"?: SettingsPropertiesComplete;
  "core/freeform"?: SettingsPropertiesComplete;
  "core/gallery"?: SettingsPropertiesComplete;
  "core/group"?: SettingsPropertiesComplete;
  "core/heading"?: SettingsPropertiesComplete;
  "core/home-link"?: SettingsPropertiesComplete;
  "core/html"?: SettingsPropertiesComplete;
  "core/image"?: SettingsPropertiesComplete;
  "core/latest-comments"?: SettingsPropertiesComplete;
  "core/latest-posts"?: SettingsPropertiesComplete;
  "core/list"?: SettingsPropertiesComplete;
  "core/list-item"?: SettingsPropertiesComplete;
  "core/loginout"?: SettingsPropertiesComplete;
  "core/media-text"?: SettingsPropertiesComplete;
  "core/missing"?: SettingsPropertiesComplete;
  "core/more"?: SettingsPropertiesComplete;
  "core/navigation"?: SettingsPropertiesComplete;
  "core/navigation-link"?: SettingsPropertiesComplete;
  "core/navigation-submenu"?: SettingsPropertiesComplete;
  "core/nextpage"?: SettingsPropertiesComplete;
  "core/page-list"?: SettingsPropertiesComplete;
  "core/page-list-item"?: SettingsPropertiesComplete;
  "core/paragraph"?: SettingsPropertiesComplete;
  "core/post-author"?: SettingsPropertiesComplete;
  "core/post-author-biography"?: SettingsPropertiesComplete;
  "core/post-author-name"?: SettingsPropertiesComplete;
  "core/post-comment"?: SettingsPropertiesComplete;
  "core/post-comments-count"?: SettingsPropertiesComplete;
  "core/post-comments-form"?: SettingsPropertiesComplete;
  "core/post-comments-link"?: SettingsPropertiesComplete;
  "core/post-content"?: SettingsPropertiesComplete;
  "core/post-date"?: SettingsPropertiesComplete;
  "core/post-excerpt"?: SettingsPropertiesComplete;
  "core/post-featured-image"?: SettingsPropertiesComplete;
  "core/post-navigation-link"?: SettingsPropertiesComplete;
  "core/post-template"?: SettingsPropertiesComplete;
  "core/post-terms"?: SettingsPropertiesComplete;
  "core/post-title"?: SettingsPropertiesComplete;
  "core/preformatted"?: SettingsPropertiesComplete;
  "core/pullquote"?: SettingsPropertiesComplete;
  "core/query"?: SettingsPropertiesComplete;
  "core/query-no-results"?: SettingsPropertiesComplete;
  "core/query-pagination"?: SettingsPropertiesComplete;
  "core/query-pagination-next"?: SettingsPropertiesComplete;
  "core/query-pagination-numbers"?: SettingsPropertiesComplete;
  "core/query-pagination-previous"?: SettingsPropertiesComplete;
  "core/query-title"?: SettingsPropertiesComplete;
  "core/query-total"?: SettingsPropertiesComplete;
  "core/quote"?: SettingsPropertiesComplete;
  "core/read-more"?: SettingsPropertiesComplete;
  "core/rss"?: SettingsPropertiesComplete;
  "core/search"?: SettingsPropertiesComplete;
  "core/separator"?: SettingsPropertiesComplete;
  "core/shortcode"?: SettingsPropertiesComplete;
  "core/site-logo"?: SettingsPropertiesComplete;
  "core/site-tagline"?: SettingsPropertiesComplete;
  "core/site-title"?: SettingsPropertiesComplete;
  "core/social-link"?: SettingsPropertiesComplete;
  "core/social-links"?: SettingsPropertiesComplete;
  "core/spacer"?: SettingsPropertiesComplete;
  "core/table"?: SettingsPropertiesComplete;
  "core/tag-cloud"?: SettingsPropertiesComplete;
  "core/template-part"?: SettingsPropertiesComplete;
  "core/term-description"?: SettingsPropertiesComplete;
  "core/text-columns"?: SettingsPropertiesComplete;
  "core/verse"?: SettingsPropertiesComplete;
  "core/video"?: SettingsPropertiesComplete;
  "core/widget-area"?: SettingsPropertiesComplete;
  "core/legacy-widget"?: SettingsPropertiesComplete;
  "core/widget-group"?: SettingsPropertiesComplete;
  [k: string]: SettingsPropertiesComplete;
}
interface StylesProperties {
  /**
   * Background styles.
   */
  background?: {
    /**
     * Sets the `background-image` CSS property.
     */
    backgroundImage?: string | RefComplete | {
      /**
       * A URL to an image file, or a path to a file relative to the theme root directory, and prefixed with `file:`, e.g., 'file:./path/to/file.png'.
       */
      url?: string;
    };
    /**
     * Sets the `background-position` CSS property.
     */
    backgroundPosition?: string | RefComplete;
    /**
     * Sets the `background-repeat` CSS property.
     */
    backgroundRepeat?: string | RefComplete;
    /**
     * Sets the `background-size` CSS property.
     */
    backgroundSize?: string | RefComplete;
    /**
     * Sets the `background-attachment` CSS property.
     */
    backgroundAttachment?: string | RefComplete;
  };
  /**
   * Border styles.
   */
  border?: {
    /**
     * Sets the `border-color` CSS property.
     */
    color?: string | RefComplete;
    /**
     * Sets the `border-radius` CSS property.
     */
    radius?: string | RefComplete | {
      /**
       * Sets the `border-top-left-radius` CSS property.
       */
      topLeft?: string | RefComplete;
      /**
       * Sets the `border-top-right-radius` CSS property.
       */
      topRight?: string | RefComplete;
      /**
       * Sets the `border-bottom-left-radius` CSS property.
       */
      bottomLeft?: string | RefComplete;
      /**
       * Sets the `border-bottom-right-radius` CSS property.
       */
      bottomRight?: string | RefComplete;
      [k: string]: unknown;
    };
    /**
     * Sets the `border-style` CSS property.
     */
    style?: string | RefComplete;
    /**
     * Sets the `border-width` CSS property.
     */
    width?: string | RefComplete;
    top?: {
      /**
       * Sets the `border-top-color` CSS property.
       */
      color?: string | RefComplete;
      /**
       * Sets the `border-top-style` CSS property.
       */
      style?: string | RefComplete;
      /**
       * Sets the `border-top-width` CSS property.
       */
      width?: string | RefComplete;
    };
    right?: {
      /**
       * Sets the `border-right-color` CSS property.
       */
      color?: string | RefComplete;
      /**
       * Sets the `border-right-style` CSS property.
       */
      style?: string | RefComplete;
      /**
       * Sets the `border-right-width` CSS property.
       */
      width?: string | RefComplete;
    };
    bottom?: {
      /**
       * Sets the `border-bottom-color` CSS property.
       */
      color?: string | RefComplete;
      /**
       * Sets the `border-bottom-style` CSS property.
       */
      style?: string | RefComplete;
      /**
       * Sets the `border-bottom-width` CSS property.
       */
      width?: string | RefComplete;
    };
    left?: {
      /**
       * Sets the `border-left-color` CSS property.
       */
      color?: string | RefComplete;
      /**
       * Sets the `border-left-style` CSS property.
       */
      style?: string | RefComplete;
      /**
       * Sets the `border-left-width` CSS property.
       */
      width?: string | RefComplete;
    };
  };
  /**
   * Color styles.
   */
  color?: {
    /**
     * Sets the `background-color` CSS property.
     */
    background?: string | RefComplete;
    /**
     * Sets the `background` CSS property.
     */
    gradient?: string | RefComplete;
    /**
     * Sets the `color` CSS property.
     */
    text?: string | RefComplete;
  };
  /**
   * Sets custom CSS to apply styling not covered by other theme.json properties.
   */
  css?: string;
  /**
   * Dimensions styles.
   */
  dimensions?: {
    /**
     * Sets the `aspect-ratio` CSS property.
     */
    aspectRatio?: string | RefComplete;
    /**
     * Sets the `min-height` CSS property.
     */
    minHeight?: string | RefComplete;
    [k: string]: unknown;
  };
  /**
   * CSS and SVG filter styles.
   */
  filter?: {
    /**
     * Sets the duotone filter.
     */
    duotone?: string | RefComplete;
  };
  /**
   * Outline styles.
   */
  outline?: {
    /**
     * Sets the `outline-color` CSS property.
     */
    color?: string | RefComplete;
    /**
     * Sets the `outline-offset` CSS property.
     */
    offset?: string | RefComplete;
    /**
     * Sets the `outline-style` CSS property.
     */
    style?: string | RefComplete;
    /**
     * Sets the `outline-width` CSS property.
     */
    width?: string | RefComplete;
  };
  /**
   * Box shadow styles.
   */
  shadow?: string | RefComplete;
  /**
   * Spacing styles.
   */
  spacing?: {
    /**
     * Sets the `--wp--style--block-gap` CSS custom property when settings.spacing.blockGap is true.
     */
    blockGap?: string | RefComplete;
    /**
     * Margin styles.
     */
    margin?: {
      /**
       * Sets the `margin-top` CSS property.
       */
      top?: string | RefComplete;
      /**
       * Sets the `margin-right` CSS property.
       */
      right?: string | RefComplete;
      /**
       * Sets the `margin-bottom` CSS property.
       */
      bottom?: string | RefComplete;
      /**
       * Sets the `margin-left` CSS property.
       */
      left?: string | RefComplete;
    };
    /**
     * Padding styles.
     */
    padding?: {
      /**
       * Sets the `padding-top` CSS property.
       */
      top?: string | RefComplete;
      /**
       * Sets the `padding-right` CSS property.
       */
      right?: string | RefComplete;
      /**
       * Sets the `padding-bottom` CSS property.
       */
      bottom?: string | RefComplete;
      /**
       * Sets the `padding-left` CSS property.
       */
      left?: string | RefComplete;
    };
  };
  /**
   * Typography styles.
   */
  typography?: {
    /**
     * Sets the `font-family` CSS property.
     */
    fontFamily?: string | RefComplete;
    /**
     * Sets the `font-size` CSS property.
     */
    fontSize?: string | RefComplete;
    /**
     * Sets the `font-style` CSS property.
     */
    fontStyle?: string | RefComplete;
    /**
     * Sets the `font-weight` CSS property.
     */
    fontWeight?: string | RefComplete;
    /**
     * Sets the `letter-spacing` CSS property.
     */
    letterSpacing?: string | RefComplete;
    /**
     * Sets the `line-height` CSS property.
     */
    lineHeight?: string | RefComplete;
    /**
     * Sets the `text-align` CSS property.
     */
    textAlign?: string | RefComplete;
    /**
     * Sets the `column-count` CSS property.
     */
    textColumns?: string | RefComplete;
    /**
     * Sets the `text-decoration` CSS property.
     */
    textDecoration?: string | RefComplete;
    /**
     * Sets the `writing-mode` CSS property.
     */
    writingMode?: string | RefComplete;
    /**
     * Sets the `text-transform` CSS property.
     */
    textTransform?: string | RefComplete;
  };
  [k: string]: unknown;
}
interface RefComplete {
  /**
   * A reference to another property value. e.g. `styles.color.text`
   */
  ref?: string;
}
/**
 * Styles defined on a per-element basis using the element's selector.
 */
interface StylesElementsPropertiesComplete {
  button?: StylesProperties & StylesElementsPseudoSelectorsProperties & {
    [k: string]: unknown;
  };
  link?: StylesProperties & StylesElementsPseudoSelectorsProperties & {
    [k: string]: unknown;
  };
  heading?: StylesPropertiesComplete;
  h1?: StylesPropertiesComplete;
  h2?: StylesPropertiesComplete;
  h3?: StylesPropertiesComplete;
  h4?: StylesPropertiesComplete;
  h5?: StylesPropertiesComplete;
  h6?: StylesPropertiesComplete;
  caption?: StylesPropertiesComplete;
  cite?: StylesPropertiesComplete;
  select?: StylesPropertiesComplete;
  textInput?: StylesPropertiesComplete;
}
interface StylesElementsPseudoSelectorsProperties {
  ":active"?: StylesPropertiesComplete;
  ":any-link"?: StylesPropertiesComplete;
  ":focus"?: StylesPropertiesComplete;
  ":focus-visible"?: StylesPropertiesComplete;
  ":hover"?: StylesPropertiesComplete;
  ":link"?: StylesPropertiesComplete;
  ":visited"?: StylesPropertiesComplete;
  [k: string]: unknown;
}
/**
 * Styles defined on a per-block basis using the block's selector.
 */
interface StylesBlocksPropertiesComplete {
  "core/archives"?: StylesPropertiesAndElementsComplete;
  "core/audio"?: StylesPropertiesAndElementsComplete;
  "core/avatar"?: StylesPropertiesAndElementsComplete;
  "core/block"?: StylesPropertiesAndElementsComplete;
  "core/button"?: StylesPropertiesAndElementsComplete;
  "core/buttons"?: StylesPropertiesAndElementsComplete;
  "core/calendar"?: StylesPropertiesAndElementsComplete;
  "core/categories"?: StylesPropertiesAndElementsComplete;
  "core/code"?: StylesPropertiesAndElementsComplete;
  "core/column"?: StylesPropertiesAndElementsComplete;
  "core/columns"?: StylesPropertiesAndElementsComplete;
  "core/comment-author-avatar"?: StylesPropertiesAndElementsComplete;
  "core/comment-author-name"?: StylesPropertiesAndElementsComplete;
  "core/comment-content"?: StylesPropertiesAndElementsComplete;
  "core/comment-date"?: StylesPropertiesAndElementsComplete;
  "core/comment-edit-link"?: StylesPropertiesAndElementsComplete;
  "core/comment-reply-link"?: StylesPropertiesAndElementsComplete;
  "core/comments"?: StylesPropertiesAndElementsComplete;
  "core/comments-pagination"?: StylesPropertiesAndElementsComplete;
  "core/comments-pagination-next"?: StylesPropertiesAndElementsComplete;
  "core/comments-pagination-numbers"?: StylesPropertiesAndElementsComplete;
  "core/comments-pagination-previous"?: StylesPropertiesAndElementsComplete;
  "core/comments-title"?: StylesPropertiesAndElementsComplete;
  "core/comment-template"?: StylesPropertiesAndElementsComplete;
  "core/cover"?: StylesPropertiesAndElementsComplete;
  "core/details"?: StylesPropertiesAndElementsComplete;
  "core/embed"?: StylesPropertiesAndElementsComplete;
  "core/file"?: StylesPropertiesAndElementsComplete;
  "core/footnotes"?: StylesPropertiesAndElementsComplete;
  "core/freeform"?: StylesPropertiesAndElementsComplete;
  "core/gallery"?: StylesPropertiesAndElementsComplete;
  "core/group"?: StylesPropertiesAndElementsComplete;
  "core/heading"?: StylesPropertiesAndElementsComplete;
  "core/home-link"?: StylesPropertiesAndElementsComplete;
  "core/html"?: StylesPropertiesAndElementsComplete;
  "core/image"?: StylesPropertiesAndElementsComplete;
  "core/latest-comments"?: StylesPropertiesAndElementsComplete;
  "core/latest-posts"?: StylesPropertiesAndElementsComplete;
  "core/list"?: StylesPropertiesAndElementsComplete;
  "core/list-item"?: StylesPropertiesAndElementsComplete;
  "core/loginout"?: StylesPropertiesAndElementsComplete;
  "core/media-text"?: StylesPropertiesAndElementsComplete;
  "core/missing"?: StylesPropertiesAndElementsComplete;
  "core/more"?: StylesPropertiesAndElementsComplete;
  "core/navigation"?: StylesPropertiesAndElementsComplete;
  "core/navigation-link"?: StylesPropertiesAndElementsComplete;
  "core/navigation-submenu"?: StylesPropertiesAndElementsComplete;
  "core/nextpage"?: StylesPropertiesAndElementsComplete;
  "core/page-list"?: StylesPropertiesAndElementsComplete;
  "core/page-list-item"?: StylesPropertiesAndElementsComplete;
  "core/paragraph"?: StylesPropertiesAndElementsComplete;
  "core/post-author"?: StylesPropertiesAndElementsComplete;
  "core/post-author-biography"?: StylesPropertiesAndElementsComplete;
  "core/post-author-name"?: StylesPropertiesAndElementsComplete;
  "core/post-comment"?: StylesPropertiesAndElementsComplete;
  "core/post-comments-count"?: StylesPropertiesAndElementsComplete;
  "core/post-comments-form"?: StylesPropertiesAndElementsComplete;
  "core/post-comments-link"?: StylesPropertiesAndElementsComplete;
  "core/post-content"?: StylesPropertiesAndElementsComplete;
  "core/post-date"?: StylesPropertiesAndElementsComplete;
  "core/post-excerpt"?: StylesPropertiesAndElementsComplete;
  "core/post-featured-image"?: StylesPropertiesAndElementsComplete;
  "core/post-navigation-link"?: StylesPropertiesAndElementsComplete;
  "core/post-template"?: StylesPropertiesAndElementsComplete;
  "core/post-terms"?: StylesPropertiesAndElementsComplete;
  "core/post-title"?: StylesPropertiesAndElementsComplete;
  "core/preformatted"?: StylesPropertiesAndElementsComplete;
  "core/pullquote"?: StylesPropertiesAndElementsComplete;
  "core/query"?: StylesPropertiesAndElementsComplete;
  "core/query-no-results"?: StylesPropertiesAndElementsComplete;
  "core/query-pagination"?: StylesPropertiesAndElementsComplete;
  "core/query-pagination-next"?: StylesPropertiesAndElementsComplete;
  "core/query-pagination-numbers"?: StylesPropertiesAndElementsComplete;
  "core/query-pagination-previous"?: StylesPropertiesAndElementsComplete;
  "core/query-title"?: StylesPropertiesAndElementsComplete;
  "core/query-total"?: StylesPropertiesAndElementsComplete;
  "core/quote"?: StylesPropertiesAndElementsComplete;
  "core/read-more"?: StylesPropertiesAndElementsComplete;
  "core/rss"?: StylesPropertiesAndElementsComplete;
  "core/search"?: StylesPropertiesAndElementsComplete;
  "core/separator"?: StylesPropertiesAndElementsComplete;
  "core/shortcode"?: StylesPropertiesAndElementsComplete;
  "core/site-logo"?: StylesPropertiesAndElementsComplete;
  "core/site-tagline"?: StylesPropertiesAndElementsComplete;
  "core/site-title"?: StylesPropertiesAndElementsComplete;
  "core/social-link"?: StylesPropertiesAndElementsComplete;
  "core/social-links"?: StylesPropertiesAndElementsComplete;
  "core/spacer"?: StylesPropertiesAndElementsComplete;
  "core/table"?: StylesPropertiesAndElementsComplete;
  "core/tag-cloud"?: StylesPropertiesAndElementsComplete;
  "core/template-part"?: StylesPropertiesAndElementsComplete;
  "core/term-description"?: StylesPropertiesAndElementsComplete;
  "core/text-columns"?: StylesPropertiesAndElementsComplete;
  "core/verse"?: StylesPropertiesAndElementsComplete;
  "core/video"?: StylesPropertiesAndElementsComplete;
  "core/widget-area"?: StylesPropertiesAndElementsComplete;
  "core/legacy-widget"?: StylesPropertiesAndElementsComplete;
  "core/widget-group"?: StylesPropertiesAndElementsComplete;
  [k: string]: StylesPropertiesAndElementsComplete;
}
interface StylesVariationsPropertiesComplete {
  [k: string]: StylesVariationPropertiesComplete;
}
interface StylesVariationBlocksPropertiesComplete {
  "core/archives"?: StylesVariationBlockPropertiesComplete;
  "core/audio"?: StylesVariationBlockPropertiesComplete;
  "core/avatar"?: StylesVariationBlockPropertiesComplete;
  "core/block"?: StylesVariationBlockPropertiesComplete;
  "core/button"?: StylesVariationBlockPropertiesComplete;
  "core/buttons"?: StylesVariationBlockPropertiesComplete;
  "core/calendar"?: StylesVariationBlockPropertiesComplete;
  "core/categories"?: StylesVariationBlockPropertiesComplete;
  "core/code"?: StylesVariationBlockPropertiesComplete;
  "core/column"?: StylesVariationBlockPropertiesComplete;
  "core/columns"?: StylesVariationBlockPropertiesComplete;
  "core/comment-author-avatar"?: StylesVariationBlockPropertiesComplete;
  "core/comment-author-name"?: StylesVariationBlockPropertiesComplete;
  "core/comment-content"?: StylesVariationBlockPropertiesComplete;
  "core/comment-date"?: StylesVariationBlockPropertiesComplete;
  "core/comment-edit-link"?: StylesVariationBlockPropertiesComplete;
  "core/comment-reply-link"?: StylesVariationBlockPropertiesComplete;
  "core/comments"?: StylesVariationBlockPropertiesComplete;
  "core/comments-pagination"?: StylesVariationBlockPropertiesComplete;
  "core/comments-pagination-next"?: StylesVariationBlockPropertiesComplete;
  "core/comments-pagination-numbers"?: StylesVariationBlockPropertiesComplete;
  "core/comments-pagination-previous"?: StylesVariationBlockPropertiesComplete;
  "core/comments-title"?: StylesVariationBlockPropertiesComplete;
  "core/comment-template"?: StylesVariationBlockPropertiesComplete;
  "core/cover"?: StylesVariationBlockPropertiesComplete;
  "core/details"?: StylesVariationBlockPropertiesComplete;
  "core/embed"?: StylesVariationBlockPropertiesComplete;
  "core/file"?: StylesVariationBlockPropertiesComplete;
  "core/footnotes"?: StylesVariationBlockPropertiesComplete;
  "core/freeform"?: StylesVariationBlockPropertiesComplete;
  "core/gallery"?: StylesVariationBlockPropertiesComplete;
  "core/group"?: StylesVariationBlockPropertiesComplete;
  "core/heading"?: StylesVariationBlockPropertiesComplete;
  "core/home-link"?: StylesVariationBlockPropertiesComplete;
  "core/html"?: StylesVariationBlockPropertiesComplete;
  "core/image"?: StylesVariationBlockPropertiesComplete;
  "core/latest-comments"?: StylesVariationBlockPropertiesComplete;
  "core/latest-posts"?: StylesVariationBlockPropertiesComplete;
  "core/list"?: StylesVariationBlockPropertiesComplete;
  "core/list-item"?: StylesVariationBlockPropertiesComplete;
  "core/loginout"?: StylesVariationBlockPropertiesComplete;
  "core/media-text"?: StylesVariationBlockPropertiesComplete;
  "core/missing"?: StylesVariationBlockPropertiesComplete;
  "core/more"?: StylesVariationBlockPropertiesComplete;
  "core/navigation"?: StylesVariationBlockPropertiesComplete;
  "core/navigation-link"?: StylesVariationBlockPropertiesComplete;
  "core/navigation-submenu"?: StylesVariationBlockPropertiesComplete;
  "core/nextpage"?: StylesVariationBlockPropertiesComplete;
  "core/page-list"?: StylesVariationBlockPropertiesComplete;
  "core/page-list-item"?: StylesVariationBlockPropertiesComplete;
  "core/paragraph"?: StylesVariationBlockPropertiesComplete;
  "core/post-author"?: StylesVariationBlockPropertiesComplete;
  "core/post-author-biography"?: StylesVariationBlockPropertiesComplete;
  "core/post-author-name"?: StylesVariationBlockPropertiesComplete;
  "core/post-comment"?: StylesVariationBlockPropertiesComplete;
  "core/post-comments-count"?: StylesVariationBlockPropertiesComplete;
  "core/post-comments-form"?: StylesVariationBlockPropertiesComplete;
  "core/post-comments-link"?: StylesVariationBlockPropertiesComplete;
  "core/post-content"?: StylesVariationBlockPropertiesComplete;
  "core/post-date"?: StylesVariationBlockPropertiesComplete;
  "core/post-excerpt"?: StylesVariationBlockPropertiesComplete;
  "core/post-featured-image"?: StylesVariationBlockPropertiesComplete;
  "core/post-navigation-link"?: StylesVariationBlockPropertiesComplete;
  "core/post-template"?: StylesVariationBlockPropertiesComplete;
  "core/post-terms"?: StylesVariationBlockPropertiesComplete;
  "core/post-title"?: StylesVariationBlockPropertiesComplete;
  "core/preformatted"?: StylesVariationBlockPropertiesComplete;
  "core/pullquote"?: StylesVariationBlockPropertiesComplete;
  "core/query"?: StylesVariationBlockPropertiesComplete;
  "core/query-no-results"?: StylesVariationBlockPropertiesComplete;
  "core/query-pagination"?: StylesVariationBlockPropertiesComplete;
  "core/query-pagination-next"?: StylesVariationBlockPropertiesComplete;
  "core/query-pagination-numbers"?: StylesVariationBlockPropertiesComplete;
  "core/query-pagination-previous"?: StylesVariationBlockPropertiesComplete;
  "core/query-title"?: StylesVariationBlockPropertiesComplete;
  "core/query-total"?: StylesPropertiesAndElementsComplete;
  "core/quote"?: StylesVariationBlockPropertiesComplete;
  "core/read-more"?: StylesVariationBlockPropertiesComplete;
  "core/rss"?: StylesVariationBlockPropertiesComplete;
  "core/search"?: StylesVariationBlockPropertiesComplete;
  "core/separator"?: StylesVariationBlockPropertiesComplete;
  "core/shortcode"?: StylesVariationBlockPropertiesComplete;
  "core/site-logo"?: StylesVariationBlockPropertiesComplete;
  "core/site-tagline"?: StylesVariationBlockPropertiesComplete;
  "core/site-title"?: StylesVariationBlockPropertiesComplete;
  "core/social-link"?: StylesVariationBlockPropertiesComplete;
  "core/social-links"?: StylesVariationBlockPropertiesComplete;
  "core/spacer"?: StylesVariationBlockPropertiesComplete;
  "core/table"?: StylesVariationBlockPropertiesComplete;
  "core/tag-cloud"?: StylesVariationBlockPropertiesComplete;
  "core/template-part"?: StylesVariationBlockPropertiesComplete;
  "core/term-description"?: StylesVariationBlockPropertiesComplete;
  "core/text-columns"?: StylesVariationBlockPropertiesComplete;
  "core/verse"?: StylesVariationBlockPropertiesComplete;
  "core/video"?: StylesVariationBlockPropertiesComplete;
  "core/widget-area"?: StylesVariationBlockPropertiesComplete;
  "core/legacy-widget"?: StylesVariationBlockPropertiesComplete;
  "core/widget-group"?: StylesVariationBlockPropertiesComplete;
  [k: string]: StylesVariationBlockPropertiesComplete;
}
interface StylesVariationsProperties {
  [k: string]: StylesVariationProperties;
}
//#endregion
//#region src/types/wp-env.d.ts
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

type JSONSchemaForWordPressWpEnvConfigurationFiles = WpEnvProperties & {
  $schema?: string;
  /**
   * The key env is available to override any of the above options on an individual-environment basis.
   */
  env?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[a-zA-Z]".
     */
    [k: string]: WpEnvProperties & {
      [k: string]: unknown;
    };
  };
  /**
   * The port number for the test site. You'll access the instance through the port: http://localhost:8889
   */
  testsPort?: number;
  /**
   * Mapping of commands that should be executed at certain points in the lifecycle.
   */
  lifecycleScripts?: {
    /**
     * Runs after wp-env start has finished setting up the environment.
     */
    afterStart?: string;
    /**
     * Runs after wp-env clean has finished cleaning the environment.
     */
    afterClean?: string;
    /**
     * Runs after wp-env destroy has destroyed the environment.
     */
    afterDestroy?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
} & {
  [k: string]: unknown;
};
interface WpEnvProperties {
  /**
   * The WordPress installation to use. If null is specified, wp-env will use the latest production release of WordPress.
   */
  core?: string | null;
  /**
   * The PHP version to use. If null is specified, wp-env will use the default version used with production release of WordPress.
   */
  phpVersion?: string | null;
  /**
   * A list of plugins to install and activate in the environment.
   */
  plugins?: string[];
  /**
   * A list of themes to install in the environment.
   */
  themes?: string[];
  /**
   * The primary port number to use for the installation. You'll access the instance through the port: http://localhost:8888
   */
  port?: number;
  /**
   * Mapping of wp-config.php constants to their desired values.
   */
  config?: {
    [k: string]: unknown;
  };
  /**
   * Mapping of WordPress directories to local directories to be mounted in the WordPress instance.
   */
  mappings?: {
    [k: string]: unknown;
  };
  /**
   * The port number to access phpMyAdmin.
   */
  phpmyadminPort?: number;
  /**
   * Whether to set up a multisite installation.
   */
  multisite?: boolean;
  [k: string]: unknown;
}
//#endregion
export { type JSONSchemaForWordPressBlocks as BlockJson, type JSONSchemaForWordPressFontCollections as FontCollection, type FontFace, type theme_d_exports as ThemeJson, type JSONSchemaForWordPressWpEnvConfigurationFiles as WpEnvJson, type WpEnvProperties };